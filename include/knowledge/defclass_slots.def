defdefslot(llvm::Type::TypeID) {
    str << "(slot " << name << "\n"
        << "(type SYMBOL)\n"
        << "(allowed-values void half float double x86-fp80\n"
        << "fp128 ppc-fp128 label metadata\n"
        << "x86-mmx token integer function\n"
        << "struct array pointer vector\n"
        << ")\n"
        << "(storage local)\n"
        << "(visibility public))\n";
}
BeginDefClassBuilderNode(llvm::Type) {
    slot(llvm::Type::TypeID, "type-id");
	slot(bool, "is-void-type");
	slot(bool, "is-half-type");
	slot(bool, "is-float-type");
	slot(bool, "is-double-type");
	slot(bool, "is-x86-fp80-type");
	slot(bool, "is-fp128-type");
	slot(bool, "is-ppc-fp128-type");
	slot(bool, "is-floating-point");
	slot(bool, "is-x86-mmx-type");
	slot(bool, "is-fp-or-fp-vector-type");
	slot(bool, "is-label-type");
	slot(bool, "is-metadata-type");
	slot(bool, "is-int-or-int-vector-type");
	slot(bool, "is-ptr-or-ptr-vector-type");
	slot(bool, "is-empty-type");
	slot(bool, "is-first-class-type");
	slot(bool, "is-single-value-type");
	slot(bool, "is-aggregate-type");
	slot(unsigned, "primitive-bit-size");
	slot(unsigned, "scalar-bit-size");
	slot(int, "fp-mantissa-width");
	slot(llvm::Type*, "scalar-type");
	slot(const llvm::fltSemantics&, "float-semantics");
	multislot(llvm::ArrayRef<llvm::Type*>, "sub-types");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::FunctionType) {
    call_defclass_parent(llvm::Type);
    multislot(llvm::ArrayRef<llvm::Type*>, "parameters");
    slot(llvm::Type*, "return-type");
    slot(bool, "is-var-arg");
    slot(unsigned, "num-parameters");
} 
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::IntegerType) {
    call_defclass_parent(llvm::Type);
    slot(unsigned, "bit-width");
    slot(unsigned, "bit-mask");
    slot(unsigned, "sign-bit");
    slot(llvm::APInt, "mask");
    slot(bool, "is-power-of-2-byte-width");
} 
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CompositeType) {
    call_defclass_parent(llvm::Type);
    multislot(llvm::Type*, "indices");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::SequentialType) {
    call_defclass_parent(llvm::CompositeType);
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::StructType) {
    call_defclass_parent(llvm::CompositeType);
    slot(bool, "is-packed");
    slot(bool, "is-literal");
    slot(bool, "is-opaque");
    slot(bool, "has-name");
    slot(llvm::StringRef, "title");
    multislot(llvm::ArrayRef<llvm::Type*> const, "elements");
    //slot(unsigned, "num-elements");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::ArrayType) {
    call_defclass_parent(llvm::SequentialType);
    //slot(unsigned, "num-elements");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::PointerType) {
    call_defclass_parent(llvm::SequentialType);
    slot(unsigned, "address-space");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::VectorType) {
    call_defclass_parent(llvm::SequentialType);
    //slot(unsigned, "num-elements");
    slot(unsigned, "bit-width");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Value) {
    slot(llvm::Type*, "type");
    slot(bool, "has-name");
    slot(llvm::StringRef, "title");
    slot(llvm::ValueName*, "value-name");
    multislot(llvm::iterator_range<llvm::Value::const_use_iterator>, "uses");
    multislot(llvm::iterator_range<llvm::Value::const_user_iterator>, "users");
    slot(bool, "has-one-use");
    slot(bool, "has-value-handle");
    slot(bool, "is-used-by-metadata");
    slot(unsigned, "num-uses" );
    slot(unsigned, "value-id" );
    slot(unsigned, "raw-subclass-optional-data");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::User) {
    call_defclass_parent(llvm::Value);
    multislot(llvm::User::const_op_range, "operands");
    multislot(llvm::ArrayRef<const uint8_t>, "descriptor");
    multislot(llvm::iterator_range<llvm::User::value_op_iterator>, "operand-values");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::MetadataAsValue) {
    call_defclass_parent(llvm::Value);
    slot(llvm::Metadata*, "metadata");
}
EndDefClassBuilderNode

defdefslot(llvm::InlineAsm::AsmDialect) {
    str << "(slot " << name << "\n"
        << "(type SYMBOL)\n"
        << "(allowed-values att intel)\n"
        << "(storage local)\n"
        << "(visibility public))\n";
}
defdefslot(llvm::InlineAsm::ConstraintPrefix) {
    str << "(slot " << name << "\n"
        << "(type SYMBOL)\n"
        << "(allowed-values is-input is-output is-clobber)\n"
        << "(storage local)\n"
        << "(visibility public))\n";
}
defstring_defslot(const std::string&);
BeginDefClassBuilderNode(llvm::InlineAsm) {
    call_defclass_parent(llvm::Value);
    slot(bool, "has-side-effects");
    slot(bool, "is-align-stack");
    slot(llvm::InlineAsm::AsmDialect, "dialect");
    slot(llvm::FunctionType*, "function-type");
    slot(const std::string&, "asm-string");
    slot(const std::string&, "constraint-string");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::BasicBlock) {
    call_defclass_parent(llvm::Value);
    slot(llvm::Module*, "module");
    slot(llvm::TerminatorInst*, "terminator");
    multislot(const llvm::BasicBlock*, "successors");
    multislot(const llvm::BasicBlock*, "predecessors");
    slot(bool, "has-address-taken");
    slot(bool, "is-eh-pad");
    slot(bool, "is-landing-pad");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Argument) {
    call_defclass_parent(llvm::Value);
    slot(unsigned, "arg-number");
    slot(bool, "has-non-null-attribute");
    slot(unsigned, "dereferenceable-bytes");
    slot(unsigned, "dereferenceable-or-null-bytes");
    slot(bool, "has-by-val-attribute");
    slot(bool, "has-by-val-or-in-alloca-attribute");
    slot(unsigned, "param-alignment");
    slot(bool, 	"has-nest-attribute");
    slot(bool, 	"has-no-alias-attribute");
    slot(bool, 	"has-no-capture-attribute");
    slot(bool, 	"has-struct-ret-attribute");
    slot(bool, 	"has-returned-attribute");
    slot(bool, 	"only-reads-memory");
    slot(bool, 	"has-in-alloca-attribute");
    slot(bool, 	"has-zext-attribute");
    slot(bool, 	"has-sext-attribute");
}
EndDefClassBuilderNode
