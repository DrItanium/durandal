#define SimpleDefClassBuilder(type) BeginDefClassBuilderNode(type) { } EndDefClassBuilderNode
#define defenumdefslot(type, input) defdefslot(type) { str << "(slot " << name << "\n" << "(type SYMBOL)\n" << "(allowed-values " << input << ")\n" << "(storage local)\n" << "(visibility public))\n"; }
defenumdefslot(llvm::Type::TypeID, "void half float double x86-fp80 fp128 ppc-fp128 label metadata x86-mmx token integer function struct array pointer vector")

BeginDefClassBuilderNode(llvm::Type) {
    slot(llvm::Type::TypeID, "type-id");
	slot(bool, "is-void-type");
	slot(bool, "is-half-type");
	slot(bool, "is-float-type");
	slot(bool, "is-double-type");
	slot(bool, "is-x86-fp80-type");
	slot(bool, "is-fp128-type");
	slot(bool, "is-ppc-fp128-type");
	slot(bool, "is-floating-point");
	slot(bool, "is-x86-mmx-type");
	slot(bool, "is-fp-or-fp-vector-type");
	slot(bool, "is-label-type");
	slot(bool, "is-metadata-type");
	slot(bool, "is-int-or-int-vector-type");
	slot(bool, "is-ptr-or-ptr-vector-type");
	slot(bool, "is-empty-type");
	slot(bool, "is-first-class-type");
	slot(bool, "is-single-value-type");
	slot(bool, "is-aggregate-type");
	slot(unsigned, "primitive-bit-size");
	slot(unsigned, "scalar-bit-size");
	slot(int, "fp-mantissa-width");
	slot(llvm::Type*, "scalar-type");
	slot(const llvm::fltSemantics&, "float-semantics");
	multislot(llvm::ArrayRef<llvm::Type*>, "sub-types");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::FunctionType) {
    multislot(llvm::ArrayRef<llvm::Type*>, "parameters");
    slot(llvm::Type*, "return-type");
    slot(bool, "is-var-arg");
    slot(unsigned, "num-parameters");
} 
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::IntegerType) {
    slot(unsigned, "bit-width");
    slot(unsigned, "bit-mask");
    slot(unsigned, "sign-bit");
    slot(llvm::APInt, "mask");
    slot(bool, "is-power-of-2-byte-width");
} 
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CompositeType) {
    multislot(llvm::Type*, "indices");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::SequentialType)

BeginDefClassBuilderNode(llvm::StructType) {
    slot(bool, "is-packed");
    slot(bool, "is-literal");
    slot(bool, "is-opaque");
    slot(bool, "has-name");
    slot(llvm::StringRef, "title");
    multislot(llvm::ArrayRef<llvm::Type*> const, "elements");
    //slot(unsigned, "num-elements");
}
EndDefClassBuilderNode
SimpleDefClassBuilder(llvm::ArrayType)

BeginDefClassBuilderNode(llvm::PointerType) {
    slot(unsigned, "address-space");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::VectorType) {
    slot(unsigned, "bit-width");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Value) {
    slot(llvm::Type*, "type");
    slot(bool, "has-name");
    slot(llvm::StringRef, "title");
    slot(llvm::ValueName*, "value-name");
    multislot(llvm::iterator_range<llvm::Value::const_use_iterator>, "uses");
    multislot(llvm::iterator_range<llvm::Value::const_user_iterator>, "users");
    slot(bool, "has-one-use");
    slot(bool, "has-value-handle");
    slot(bool, "is-used-by-metadata");
    slot(unsigned, "num-uses" );
    slot(unsigned, "value-id" );
    slot(unsigned, "raw-subclass-optional-data");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::User) {
    multislot(llvm::User::const_op_range, "operands");
    multislot(llvm::ArrayRef<const uint8_t>, "descriptor");
    multislot(llvm::iterator_range<llvm::User::value_op_iterator>, "operand-values");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::MetadataAsValue) {
    slot(llvm::Metadata*, "metadata");
}
EndDefClassBuilderNode

defenumdefslot(llvm::InlineAsm::AsmDialect, "att intel")
defenumdefslot(llvm::InlineAsm::ConstraintPrefix, "is-input is-output is-clobber")

defstring_defslot(const std::string&);
BeginDefClassBuilderNode(llvm::InlineAsm) {
    slot(bool, "has-side-effects");
    slot(bool, "is-align-stack");
    slot(llvm::InlineAsm::AsmDialect, "dialect");
    slot(llvm::FunctionType*, "function-type");
    slot(const std::string&, "asm-string");
    slot(const std::string&, "constraint-string");
}
EndDefClassBuilderNode
BeginDefClassBuilderNode(llvm::BasicBlock) {
    slot(llvm::Module*, "module");
    slot(llvm::TerminatorInst*, "terminator");
    multislot(const llvm::BasicBlock*, "successors");
    multislot(const llvm::BasicBlock*, "predecessors");
    slot(bool, "has-address-taken");
    slot(bool, "is-eh-pad");
    slot(bool, "is-landing-pad");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Argument) {
    slot(unsigned, "arg-number");
    slot(bool, "has-non-null-attribute");
    slot(unsigned, "dereferenceable-bytes");
    slot(unsigned, "dereferenceable-or-null-bytes");
    slot(bool, "has-by-val-attribute");
    slot(bool, "has-by-val-or-in-alloca-attribute");
    slot(unsigned, "param-alignment");
    slot(bool, 	"has-nest-attribute");
    slot(bool, 	"has-no-alias-attribute");
    slot(bool, 	"has-no-capture-attribute");
    slot(bool, 	"has-struct-ret-attribute");
    slot(bool, 	"has-returned-attribute");
    slot(bool, 	"only-reads-memory");
    slot(bool, 	"has-in-alloca-attribute");
    slot(bool, 	"has-zext-attribute");
    slot(bool, 	"has-sext-attribute");
}
EndDefClassBuilderNode


BeginDefClassBuilderNode(llvm::Operator) {
    slot(unsigned, "opcode");
}
EndDefClassBuilderNode


BeginDefClassBuilderNode(llvm::GEPOperator) {
    slot(bool, "is-in-bounds");
    slot(llvm::Value*, "pointer-operand");
    slot(llvm::Type*, "pointer-operand-type");
    slot(llvm::Type*, "source-element-type");
    slot(unsigned, "pointer-address-space");
    slot(unsigned, "num-indices");
    slot(bool, "has-indices");
    slot(bool, "has-all-zero-indices");
    slot(bool, "has-all-constant-indices");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::PtrToIntOperator) {
    slot(llvm::Value*, "pointer-operand");
    slot(llvm::Type*, "pointer-operand-type");
    slot(unsigned, "pointer-address-space");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::ZExtOperator) 

BeginDefClassBuilderNode(llvm::OverflowingBinaryOperator) {
    slot(bool, "has-no-unsigned-wrap");
    slot(bool, "has-no-signed-wrap");
}
EndDefClassBuilderNode

defdefslot(float) {
    str << "(slot " << name << "\n"
        << "(type FLOAT)\n"
        << "(visibility public))\n";
}
BeginDefClassBuilderNode(llvm::FPMathOperator) {
    slot(bool, "hasUnsafeAlgebra");
    slot(bool, "hasNoNaNs");
    slot(bool, "hasNoInfs");
    slot(bool, "hasNoSignedZeros");
    slot(bool, "hasAllowReciprocal");
    //slot(llvm::FastMathFlags, "getFastMathFlags");
    slot(float, "fp-accuracy");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::PossiblyExactOperator) {
    slot(bool, "is-exact");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::AddOperator)
SimpleDefClassBuilder(llvm::MulOperator) 
SimpleDefClassBuilder(llvm::ShlOperator) 
SimpleDefClassBuilder(llvm::SubOperator)
SimpleDefClassBuilder(llvm::AShrOperator)
SimpleDefClassBuilder(llvm::LShrOperator)
SimpleDefClassBuilder(llvm::SDivOperator) 
SimpleDefClassBuilder(llvm::UDivOperator)

defenumdefslot(llvm::Constant::PossibleRelocationsTy, "no-relocation local-relocation global-relocations")
BeginDefClassBuilderNode(llvm::Constant) {
    slot(bool , "isNullValue");
    slot(bool , "isOneValue");
    slot(bool , "isAllOnesValue");
    slot(bool , "isNegativeZeroValue");
    slot(bool , "isZeroValue");
    slot(bool , "isNotMinSignedValue");
    slot(bool , "isMinSignedValue");
    slot(bool , "canTrap");
    slot(bool , "isThreadDependent");
    slot(bool , "isDLLImportDependent");
    slot(bool , "isConstantUsed");
    slot(llvm::Constant::PossibleRelocationsTy , "RelocationInfo");
    slot(llvm::Constant * , "SplatValue");
    slot(const llvm::APInt & , "UniqueInteger");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::BlockAddress) {
    slot(llvm::Function*, "function");
    slot(llvm::BasicBlock*, "basic-block");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ConstantAggregateZero) {
    slot(llvm::Constant * , "SequentialElement");
    slot(unsigned , "NumElements");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::ConstantArray) 

BeginDefClassBuilderNode(llvm::ConstantDataSequential) {
    slot(llvm::Type * , "getElementType");
    slot(unsigned , "getNumElements");
    slot(unsigned, "getElementByteSize");
    slot(bool , "isString");
    slot(bool , "isCString");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ConstantExpr) {
    slot(bool , "isCast");
    slot(bool , "isCompare");
    slot(bool , "hasIndices");
    slot(bool , "isGEPWithNoNotionalOverIndexing");
    slot(unsigned , "opcode");
    slot(unsigned , "predicate");
    multislot(llvm::ArrayRef<unsigned>, "indices");
    slot(std::string, "opcode-name");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ConstantFP) {
    slot(const llvm::APFloat &, "float-value");
    slot(bool , "isZero");
    slot(bool , "isNegative");
    slot(bool , "isInfinity");
    slot(bool , "isNaN");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ConstantInt) {
    slot(const llvm::APInt & , "int-value");
    slot(unsigned , "BitWidth");
    slot(unsigned, "ZExtValue");
    slot(int, "SExtValue");
    slot(bool , "isNegative");
    slot(bool , "isZero");
    slot(bool , "isOne");
    slot(bool , "isMinusOne");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::ConstantPointerNull)

SimpleDefClassBuilder(llvm::ConstantStruct) 

BeginDefClassBuilderNode(llvm::ConstantVector) {
    slot(llvm::Constant*, "splat-value");
}
EndDefClassBuilderNode


BeginDefClassBuilderNode(llvm::UndefValue) {
    slot(llvm::UndefValue*, "sequential-element");
    slot(unsigned, "num-elements");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::ConstantDataArray) 

BeginDefClassBuilderNode(llvm::ConstantDataVector) {
    slot(llvm::Constant*, "splat-value");
}
EndDefClassBuilderNode

defenumdefslot(llvm::GlobalValue::LinkageTypes, "external-linkage available-externally link-once-any link-once-odr weak-any weak-odr appending internal private external-weak common")
defenumdefslot(llvm::GlobalValue::VisibilityTypes, "default hidden protected")
defenumdefslot( llvm::GlobalValue::DLLStorageClassTypes, "default dll-import dll-export")
defenumdefslot(llvm::GlobalValue::ThreadLocalMode, "not-thread-local general-dynamic-tls-model local-dynamic-tls-model initial-exec-tls-model local-exec-tls-model")

BeginDefClassBuilderNode(llvm::GlobalValue) {
    slot(unsigned , "getAlignment");
    slot(bool , "hasUnnamedAddr");
    slot(bool , "hasComdat");
    slot(const llvm::Comdat * , "Comdat");
    slot(llvm::GlobalValue::VisibilityTypes , "Visibility");
    slot(bool , "hasDefaultVisibility");
    slot(bool , "hasHiddenVisibility");
    slot(bool , "hasProtectedVisibility");
    slot(bool , "isThreadLocal");
    slot(llvm::GlobalValue::ThreadLocalMode , "ThreadLocalMode");
    slot(llvm::GlobalValue::DLLStorageClassTypes , "DLLStorageClass");
    slot(bool , "hasDLLImportStorageClass");
    slot(bool , "hasDLLExportStorageClass");
    slot(bool , "hasSection");
    slot(std::string , "Section");
    slot(llvm::Type * , "ValueType");
    slot(bool , "hasExternalLinkage");
    slot(bool , "hasAvailableExternallyLinkage");
    slot(bool , "hasLinkOnceLinkage");
    slot(bool , "hasLinkOnceODRLinkage");
    slot(bool , "hasWeakLinkage");
    slot(bool , "hasWeakAnyLinkage");
    slot(bool , "hasWeakODRLinkage");
    slot(bool , "hasAppendingLinkage");
    slot(bool , "hasInternalLinkage");
    slot(bool , "hasPrivateLinkage");
    slot(bool , "hasLocalLinkage");
    slot(bool , "hasExternalWeakLinkage");
    slot(bool , "hasCommonLinkage");
    slot(llvm::GlobalValue::LinkageTypes , "Linkage");
    slot(bool , "isDiscardableIfUnused");
    slot(bool , "mayBeOverridden");
    slot(bool , "isWeakForLinker");
    slot(bool , "isDeclaration");
    slot(bool , "isDeclarationForLinker");
    slot(bool , "isStrongDefinitionForLinker");
    slot(bool , "is-materializable");
    slot(bool , "is-dematerializable");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::GlobalAlias) {
    slot(llvm::Constant*, "aliasee");
    slot(llvm::GlobalObject*, "base-object");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::GlobalObject) {
    slot(unsigned, "global-object-sub-class-data");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Function) {
    slot(bool , "hasPersonalityFn");
    slot(llvm::Constant * , "PersonalityFn");
    slot(llvm::Type * , "ReturnType");
    slot(llvm::FunctionType * , "FunctionType");
    slot(bool , "isVarArg");
    slot(bool , "isMaterializable");
    slot(llvm::Intrinsic::ID , "IntrinsicID");
    slot(bool , "isIntrinsic");
    slot(llvm::CallingConv::ID , "CallingConv");
    slot(llvm::Optional< uint64_t > , "EntryCount");
    slot(unsigned , "FnStackAlignment");
    slot(bool , "hasGC");
    slot(std::string , "GC");
    slot(bool , "doesNotAccessMemory");
    slot(bool , "onlyReadsMemory");
    slot(bool , "onlyAccessesArgMemory");
    slot(bool , "doesNotReturn");
    slot(bool , "doesNotThrow");
    slot(bool , "cannotDuplicate");
    slot(bool , "isConvergent");
    slot(bool , "hasUWTable");
    slot(bool , "needsUnwindTableEntry");
    slot(bool , "hasStructRetAttr");
    slot(bool , "optForMinSize");
    slot(bool , "optForSize");
    multislot(const llvm::Function::ArgumentListType & , "ArgumentList");
    multislot(const llvm::Function::BasicBlockListType & , "BasicBlockList");
    slot(const llvm::BasicBlock & , "EntryBlock");
    multislot(const llvm::ValueSymbolTable & , "ValueSymbolTable");
    slot(bool , "hasPrefixData");
    slot(llvm::Constant * , "PrefixData");
    slot(bool , "hasPrologueData");
    slot(llvm::Constant * , "PrologueData");
    slot(bool , "isDefTriviallyDead");
    slot(bool , "callsFunctionThatReturnsTwice");
    slot(bool , "hasMetadata");
    //slot(llvm::DISubprogram * , "Subprogram");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::GlobalVariable) {
    slot(bool , "hasInitializer");
    slot(bool , "hasDefinitiveInitializer");
    slot(bool , "hasUniqueInitializer");
    slot(const llvm::Constant * , "initializer");
    slot(bool , "isConstant");
    slot(bool , "isExternallyInitialized");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::Instruction) {
    slot(llvm::Module*, "module");
    slot(unsigned, "opcode");
    slot(std::string, "opcode-name");
    slot(bool, "is-terminator");
    slot(bool, "is-binary-op");
    slot(bool, "is-shift");
    slot(bool, "is-cast");
    slot(bool, "is-logical-shift");
    slot(bool, "is-arithmetic-shift");
    slot(bool, "has-Metadata");
    slot(bool, "has-MetadataOtherThanDebugLoc");
    slot(bool, "hasUnsafeAlgebra");
    slot(bool, "hasNoNaNs");
    slot(bool, "hasNoInfs");
    slot(bool, "hasNoSignedZeros");
    slot(bool, "hasAllowReciprocal");
    //slot(llvm::FastMathFlags, "getFastMathFlags");
    slot(bool, "isAssociative");
    slot(bool, "isCommutative");
    slot(bool, "isIdempotent");
    slot(bool, "isNilpotent");
    slot(bool, "mayWriteToMemory");
    slot(bool, "mayReadFromMemory");
    slot(bool, "mayReadOrWriteMemory");
    slot(bool, "isAtomic");
    slot(bool, "mayThrow");
    slot(bool, "mayReturn");
    slot(bool, "mayHaveSideEffects");
    slot(bool, "isEHPad");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::UnaryInstruction)

BeginDefClassBuilderNode(llvm::TerminatorInst) {
    multislot(llvm::BasicBlock*, "successors");
    slot(bool, "is-exceptional");
}
EndDefClassBuilderNode
defenumdefslot(llvm::AtomicOrdering,"not-atomic unordered monotonic acquire release acquire-release sequentially-consistent")
defenumdefslot(llvm::SynchronizationScope,"single-thread cross-thread");

BeginDefClassBuilderNode(llvm::StoreInst) {
    slot(bool, "is-volatile");
    slot(unsigned, "alignment");
    slot(llvm::AtomicOrdering, "ordering");
    slot(llvm::SynchronizationScope, "synch-scope");
    slot(bool, "is-simple");
    slot(bool, "is-unordered");
    slot(llvm::Value*, "value-operand");
    slot(llvm::Value*, "pointer-operand");
    slot(unsigned, "pointer-address-space");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ShuffleVectorInst) {
    slot(llvm::VectorType*, "mask");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::SelectInst) {
    slot(llvm::Value*, "condition");
    slot(llvm::Value*, "true-value");
    slot(llvm::Value*, "false-value");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::PHINode) {
    slot(bool, "has-constant-value");
    slot(unsigned, "num-incoming-values");
    multislot(void*, "incoming-values");
    multislot(void*, "blocks");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::LandingPadInst) {
    slot(bool, "is-cleanup");
    slot(unsigned, "num-clauses");
    multislot(void*, "clauses");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::InsertValueInst) {
    multislot(void*, "indices");
    slot(llvm::Value*, "aggregate-operand");
    slot(llvm::Value*, "inserted-value-operand");
    slot(bool, "has-indices");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::InsertElementInst)

BeginDefClassBuilderNode(llvm::GetElementPtrInst) {
    slot(llvm::Type * , "SourceElementType");
    slot(llvm::Type * , "ResultElementType");
    slot(unsigned , "AddressSpace");
    slot(const llvm::Value * , "PointerOperand");
    slot(llvm::Type * , "PointerOperandType");
    slot(unsigned , "PointerAddressSpace");
    slot(unsigned , "NumIndices");
    slot(bool , "hasIndices");
    slot(bool , "hasAllZeroIndices");
    slot(bool , "hasAllConstantIndices");
    slot(bool , "isInBounds");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::FenceInst) {
    slot(llvm::AtomicOrdering, "ordering");
    slot(llvm::SynchronizationScope, "synch-scope");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ExtractElementInst) {
    slot(llvm::Value*, "vector-operand");
    slot(llvm::Value*, "index-operand");
}
EndDefClassBuilderNode

defenumdefslot(llvm::CmpInst::Predicate, "fcmp-false fcmp-oeq fcmp-ogt fcmp-oge fcmp-olt fcmp-ole fcmp-one fcmp-ord fcmp-uno fcmp-ueq fcmp-ugt  fcmp-uge  fcmp-ult  fcmp-ule  fcmp-une  fcmp-true first-fcmp-predicate last-fcmp-predicate bad-fcmp-predicate icmp-eq icmp-ne icmp-ugt icmp-uge icmp-ult icmp-ule icmp-sgt icmp-sge icmp-slt icmp-sle first-icmp-predicate last-icmp-predicate bad-icmp-predicate")

BeginDefClassBuilderNode(llvm::CmpInst) {
    slot(llvm::CmpInst::Predicate, "predicate");
    slot(bool , "isFPPredicate");
    slot(bool , "isIntPredicate");
    slot(llvm::CmpInst::Predicate , "InversePredicate");
    slot(llvm::CmpInst::Predicate , "SwappedPredicate");
    slot(bool , "isCommutative");
    slot(bool , "isEquality");
    slot(bool , "isSigned");
    slot(bool , "isUnsigned");
    slot(llvm::CmpInst::Predicate , "SignedPredicate");
    slot(bool , "isTrueWhenEqual");
    slot(bool , "isFalseWhenEqual");
}
EndDefClassBuilderNode

//SimpleDefClassBuilder(llvm::CleanupPadInst)
defenumdefslot(llvm::CallInst::TailCallKind, "none tail must-tail")


BeginDefClassBuilderNode(llvm::CallInst) {
    slot(llvm::CallInst::TailCallKind , "TailCallKind");
    slot(bool , "isTailCall");
    slot(bool , "isMustTailCall");
    slot(unsigned , "NumArgOperands");
    multislot(void*, "operands");
    slot(llvm::CallingConv::ID , "CallingConv");
    slot(const llvm::AttributeSet & , "Attributes");
    slot(bool , "isNoBuiltin");
    slot(bool , "isNoInline");
    slot(bool , "canReturnTwice");
    slot(bool , "doesNotAccessMemory");
    slot(bool , "onlyReadsMemory");
    slot(bool , "onlyAccessesArgMemory");
    slot(bool , "doesNotReturn");
    slot(bool , "doesNotThrow");
    slot(bool , "cannotDuplicate");
    slot(bool , "isConvergent");
    slot(bool , "hasStructRetAttr");
    slot(bool , "hasByValArgument");
    slot(llvm::Function * , "CalledFunction");
    slot(const llvm::Value * , "CalledValue");
    slot(bool , "isInlineAsm");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::BinaryOperator) {
    slot(bool , "hasNoUnsignedWrap");
    slot(bool , "hasNoSignedWrap");
    slot(bool , "isExact");
}
EndDefClassBuilderNode

defenumdefslot(llvm::AtomicRMWInst::BinOp, "xchg add sub and nand or xor max min umax umin first-binop last-binop bad-binop")
BeginDefClassBuilderNode(llvm::AtomicRMWInst) {
    slot(bool , "is-volatile");
    slot(llvm::AtomicRMWInst::BinOp, "bin-op");
    slot(llvm::AtomicOrdering, "ordering");
    slot(llvm::SynchronizationScope, "synch-scope");
    slot(llvm::Value*, "value-operand");
    slot(llvm::Value*, "pointer-operand");
    slot(unsigned, "pointer-address-space");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::AtomicCmpXchgInst) {
    slot(bool , "is-volatile");
    slot(bool, "is-weak");
    slot(llvm::AtomicOrdering, "success-ordering");
    slot(llvm::AtomicOrdering, "failure-ordering");
    slot(llvm::SynchronizationScope, "synch-scope");
    slot(llvm::Value*, "new-value-operand");
    slot(llvm::Value*, "compare-operand");
    slot(llvm::Value*, "pointer-operand");
    slot(unsigned, "pointer-address-space");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::IntrinsicInst) {
    slot(llvm::Intrinsic::ID, "intrinsic-id");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::FCmpInst)

BeginDefClassBuilderNode(llvm::ICmpInst) {
    slot(llvm::CmpInst::Predicate , "UnsignedPredicate");
}
EndDefClassBuilderNode


BeginDefClassBuilderNode(llvm::BranchInst) {
    slot(bool , "isUnconditional");
    slot(bool , "isConditional");
    slot(llvm::Value * , "condition");
}
EndDefClassBuilderNode
/*
BeginDefClassBuilderNode(llvm::CatchEndPadInst) {
    slot(bool , "hasUnwindDest");
    slot(bool , "unwindsToCaller");
    slot(llvm::BasicBlock* , "unwind-dest");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CatchPadInst) {
    slot(llvm::BasicBlock* , "unwind-dest");
    slot(llvm::BasicBlock* , "normal-dest");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CatchReturnInst) {
    slot(llvm::CatchPadInst* , "catch-pad");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CleanupEndPadInst) {
    slot(bool, "has-unwind-dest");
    slot(bool, "unwinds-to-caller");
    slot(llvm::CleanupPadInst* , "cleanup-pad");
    slot(llvm::BasicBlock* , "unwind-dest");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CleanupReturnInst) {
    slot(bool, "has-unwind-dest");
    slot(bool, "unwinds-to-caller");
    slot(llvm::CleanupPadInst* , "cleanup-pad");
    slot(llvm::BasicBlock* , "unwind-dest");
}
EndDefClassBuilderNode
*/

BeginDefClassBuilderNode(llvm::IndirectBrInst) {
    slot(llvm::Value*, "address");
    multislot(llvm::BasicBlock*, "destinations");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::InvokeInst) {
    slot(bool , "isNoBuiltin");
    slot(bool , "isNoInline");
    slot(bool , "doesNotAccessMemory");
    slot(bool , "onlyReadsMemory");
    slot(bool , "onlyAccessesArgMemory");
    slot(bool , "doesNotReturn");
    slot(bool , "doesNotThrow");
    slot(bool , "cannotDuplicate");
    slot(bool , "hasStructRetAttr");
    slot(bool , "hasByValArgument");
    slot(llvm::Function * , "CalledFunction");
    slot(const llvm::Value * , "CalledValue");
    slot(llvm::BasicBlock * , "NormalDest");
    slot(llvm::BasicBlock * , "UnwindDest");
    slot(llvm::LandingPadInst * , "LandingPadInst");
    slot(llvm::BasicBlock* , "unwind-dest");
    slot(llvm::BasicBlock* , "normal-dest");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ResumeInst) {
    slot(llvm::Value*, "value");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ReturnInst) {
    slot(llvm::Value*, "return-value");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::SwitchInst) {
    slot(llvm::Value*, "condition");
    slot(llvm::BasicBlock*, "default-case");
    multislot(void*, "cases");
}
EndDefClassBuilderNode

SimpleDefClassBuilder(llvm::UnreachableInst)

BeginDefClassBuilderNode(llvm::AllocaInst) {
    slot(bool, "is-array-allocation");
    slot(const llvm::Value*, "array-size");
    slot(const llvm::Type*, "allocated-type");
    slot(unsigned, "alignment");
    slot(bool, "is-static-alloca");
    slot(bool, "is-used-with-in-alloca");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::CastInst) {
    slot(bool, "is-integer-cast");
    slot(bool, "is-lossless-case");
    slot(llvm::Type*, "source-type");
    slot(llvm::Type*, "destination-type");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::ExtractValueInst) {
    multislot(llvm::ArrayRef<unsigned>, "indices");
    slot(llvm::Value*, "aggreate-operand");
}
EndDefClassBuilderNode

BeginDefClassBuilderNode(llvm::LoadInst) {
    slot(bool, "is-volatile");
    slot(unsigned, "alignment");
    slot(llvm::AtomicOrdering, "ordering");
    slot(llvm::SynchronizationScope, "synch-scope");
    slot(bool, "is-simple");
    slot(bool, "is-unordered");
    slot(llvm::Value*, "pointer-operand");
    slot(unsigned, "pointer-address-space");
}
EndDefClassBuilderNode

// TODO: add TerminatePadInst
// TODO: add VAArgInst 
// TODO: add DbgInfoIntrinsic
// TODO: add InstrProfIncrementInst
// TODO: add MemIntrinsic
