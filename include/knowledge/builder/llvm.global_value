X(unsigned, "Alignment", t->getAlignment(), Value, 0)
X(bool, "hasUnnamedAddr", t->hasUnnamedAddr(), Value, 0)
X(bool, "hasComdat", t->hasComdat(), Value, 0)
X(llvm::GlobalValue::VisibilityTypes, "Visibility", t->getVisibility(), Value, 0)
X(bool, "hasDefaultVisibility", t->hasDefaultVisibility(), Value, 0)
X(bool, "hasHiddenVisibility", t->hasHiddenVisibility(), Value, 0)
X(bool, "hasProtectedVisibility", t->hasProtectedVisibility(), Value, 0)
X(bool, "isThreadLocal", t->isThreadLocal(), Value, 0)
X(llvm::GlobalValue::ThreadLocalMode, "ThreadLocalMode", t->getThreadLocalMode(), Value, 0)
X(llvm::GlobalValue::DLLStorageClassTypes, "DLLStorageClass", t->getDLLStorageClass(), Value, 0)
X(bool, "hasDLLImportStorageClass", t->hasDLLImportStorageClass(), Value, 0)
X(bool, "hasDLLExportStorageClass", t->hasDLLExportStorageClass(), Value, 0)
X(bool, "hasSection", t->hasSection(), Value, 0)
X(const std::string&, "Section", t->getSection(), ConditionalValue, t->hasSection(), 0)
X(bool, "hasExternalLinkage", t->hasExternalLinkage(), Value, 0)
X(bool, "hasAvailableExternallyLinkage", t->hasAvailableExternallyLinkage(), Value, 0)
X(bool, "hasLinkOnceLinkage", t->hasLinkOnceLinkage(), Value, 0)
X(bool, "hasLinkOnceODRLinkage", t->hasLinkOnceODRLinkage(), Value, 0)
X(bool, "hasWeakLinkage", t->hasWeakLinkage(), Value, 0)
X(bool, "hasWeakAnyLinkage", t->hasWeakAnyLinkage(), Value, 0)
X(bool, "hasWeakODRLinkage", t->hasWeakODRLinkage(), Value, 0)
X(bool, "hasAppendingLinkage", t->hasAppendingLinkage(), Value, 0)
X(bool, "hasInternalLinkage", t->hasInternalLinkage(), Value, 0)
X(bool, "hasPrivateLinkage", t->hasPrivateLinkage(), Value, 0)
X(bool, "hasLocalLinkage", t->hasLocalLinkage(), Value, 0)
X(bool, "hasExternalWeakLinkage", t->hasExternalWeakLinkage(), Value, 0)
X(bool, "hasCommonLinkage", t->hasCommonLinkage(), Value, 0)
X(llvm::GlobalValue::LinkageTypes, "Linkage", t->getLinkage(), Value, 0)
X(bool, "isDiscardableIfUnused", t->isDiscardableIfUnused(), Value, 0)
X(bool, "mayBeOverridden", t->mayBeOverridden(), Value, 0)
X(bool, "isWeakForLinker", t->isWeakForLinker(), Value, 0)
X(bool, "isDeclaration", t->isDeclaration(), Value, 0)
X(bool, "isDeclarationForLinker", t->isDeclarationForLinker(), Value, 0)
//X(bool, "isStrongDefinitionForLinker", t->isStrongDefinitionForLinker(), Value, 0)

//Module * 	getParent 
//"PointerType *" 	getType  )
//Type * 	getValueType  )
//"Comdat *" 	getComdat )
