X(unsigned, "Alignment", t->getAlignment(), Value)
X(bool, "hasUnnamedAddr", t->hasUnnamedAddr(), Value)
X(bool, "hasComdat", t->hasComdat(), Value)
X(VisibilityTypes, "Visibility", t->getVisibility(), Value)
X(bool, "hasDefaultVisibility", t->hasDefaultVisibility(), Value)
X(bool, "hasHiddenVisibility", t->hasHiddenVisibility(), Value)
X(bool, "hasProtectedVisibility", t->hasProtectedVisibility(), Value)
X(bool, "isThreadLocal", t->isThreadLocal(), Value)
X(ThreadLocalMode, "ThreadLocalMode", t->getThreadLocalMode(), Value)
X(DLLStorageClassTypes, "DLLStorageClass", t->getDLLStorageClass(), Value)
X(bool, "hasDLLImportStorageClass", t->hasDLLImportStorageClass(), Value)
X(bool, "hasDLLExportStorageClass", t->hasDLLExportStorageClass(), Value)
X(bool, "hasSection", t->hasSection(), Value)
X(const std::string&, "Section", t->getSection(), ConditionalValue, t->hasSection())
X(bool, "hasExternalLinkage", t->hasExternalLinkage(), Value)
X(bool, "hasAvailableExternallyLinkage", t->hasAvailableExternallyLinkage(), Value)
X(bool, "hasLinkOnceLinkage", t->hasLinkOnceLinkage(), Value)
X(bool, "hasLinkOnceODRLinkage", t->hasLinkOnceODRLinkage(), Value)
X(bool, "hasWeakLinkage", t->hasWeakLinkage(), Value)
X(bool, "hasWeakAnyLinkage", t->hasWeakAnyLinkage(), Value)
X(bool, "hasWeakODRLinkage", t->hasWeakODRLinkage(), Value)
X(bool, "hasAppendingLinkage", t->hasAppendingLinkage(), Value)
X(bool, "hasInternalLinkage", t->hasInternalLinkage(), Value)
X(bool, "hasPrivateLinkage", t->hasPrivateLinkage(), Value)
X(bool, "hasLocalLinkage", t->hasLocalLinkage(), Value)
X(bool, "hasExternalWeakLinkage", t->hasExternalWeakLinkage(), Value)
X(bool, "hasCommonLinkage", t->hasCommonLinkage(), Value)
X(LinkageTypes, "Linkage", t->getLinkage(), Value)
X(bool, "isDiscardableIfUnused", t->isDiscardableIfUnused(), Value)
X(bool, "mayBeOverridden", t->mayBeOverridden(), Value)
X(bool, "isWeakForLinker", t->isWeakForLinker(), Value)
X(bool, "isDeclaration", t->isDeclaration(), Value)
X(bool, "isDeclarationForLinker", t->isDeclarationForLinker(), Value)
//X(bool, "isStrongDefinitionForLinker", t->isStrongDefinitionForLinker(), Value)

//Module * 	getParent 
//"PointerType *" 	getType  )
//Type * 	getValueType  )
//"Comdat *" 	getComdat )
